@model NihongoSekai.Web.ViewModels.BuilderPageViewModel
@{
    ViewBag.Title = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (ViewBag.IsPreview == true)
{
    <div class="alert alert-warning mb-0 rounded-0 text-center">
        <i class="bi bi-eye me-2"></i>
        <strong>Preview Mode</strong> - This content is not yet published
    </div>
}

<!-- Builder.io Dynamic Content -->
<div class="builder-page" data-builder-page="@Model.Id" data-builder-slug="@Model.Slug">
    @foreach (var section in Model.Sections)
    {
        @await Html.RenderSectionAsync(section)
    }
</div>

@section Meta {
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <meta name="description" content="@Model.Description" />
    }
    
    <!-- Open Graph Tags -->
    <meta property="og:title" content="@Model.Title" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="@($"{Context.Request.Scheme}://{Context.Request.Host}/{Model.Slug}")" />
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <meta property="og:description" content="@Model.Description" />
    }
    <meta property="og:site_name" content="Nihongo Sekai" />
    
    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="@Model.Title" />
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <meta name="twitter:description" content="@Model.Description" />
    }
    
    <!-- Structured Data -->
    @if (ViewBag.StructuredData != null)
    {
        <script type="application/ld+json">
            @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.StructuredData))
        </script>
    }
}

@section Scripts {
    <script>
        // Builder.io page tracking
        console.log('Builder.io page loaded:', '@Model.Id', '@Model.Slug');
        
        // Track page view
        if (typeof gtag !== 'undefined') {
            gtag('config', 'GA_MEASUREMENT_ID', {
                page_title: '@Model.Title',
                page_location: window.location.href
            });
        }
        
        // Initialize any dynamic components
        document.addEventListener('DOMContentLoaded', function() {
            // Lazy load images
            const images = document.querySelectorAll('img[data-src]');
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.src = img.dataset.src;
                            img.classList.remove('lazy');
                            imageObserver.unobserve(img);
                        }
                    });
                });
                
                images.forEach(img => imageObserver.observe(img));
            } else {
                // Fallback for older browsers
                images.forEach(img => {
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                });
            }
            
            // Initialize animations
            if ('IntersectionObserver' in window) {
                const animationObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('animate-in');
                        }
                    });
                }, { threshold: 0.1 });
                
                document.querySelectorAll('.animate-on-scroll').forEach(el => {
                    animationObserver.observe(el);
                });
            }
        });
        
        @if (ViewBag.IsPreview == true)
        {
            <text>
            // Preview mode specific functionality
            console.warn('Page is in preview mode');
            
            // Add preview styling
            document.body.classList.add('builder-preview');
            
            // Disable form submissions in preview
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    alert('Form submission disabled in preview mode');
                });
            });
            </text>
        }
    </script>
}

@functions {
    public async Task<IHtmlContent> RenderSectionAsync(NihongoSekai.Web.ViewModels.PageSectionViewModel section)
    {
        try
        {
            switch (section.Component)
            {
                case "HeroSection":
                    return await Html.PartialAsync("~/Views/Shared/Components/HeroSection.cshtml", 
                        CreateHeroViewModel(section.Properties));
                
                case "FeaturedCourses":
                    return await Html.PartialAsync("~/Views/Shared/Components/FeaturedCourses.cshtml", 
                        section.Properties);
                
                case "StatsGrid":
                case "StatsSection":
                    return await Html.PartialAsync("~/Views/Shared/Components/StatsGrid.cshtml", 
                        section.Properties);
                
                case "PageHeader":
                    return await Html.PartialAsync("~/Views/Shared/Components/PageHeader.cshtml", 
                        section.Properties);
                
                case "CourseFilters":
                    return await Html.PartialAsync("~/Views/Shared/Components/CourseFilters.cshtml", 
                        section.Properties);
                
                case "CourseCatalog":
                    return await Html.PartialAsync("~/Views/Shared/Components/CourseCatalog.cshtml", 
                        section.Properties);
                
                case "CallToAction":
                    return await Html.PartialAsync("~/Views/Shared/Components/CallToAction.cshtml", 
                        section.Properties);
                
                case "Testimonials":
                    return await Html.PartialAsync("~/Views/Shared/Components/Testimonials.cshtml", 
                        section.Properties);
                
                case "ContactForm":
                    return await Html.PartialAsync("~/Views/Shared/Components/ContactForm.cshtml", 
                        section.Properties);
                
                case "NewsletterSignup":
                    return await Html.PartialAsync("~/Views/Shared/Components/NewsletterSignup.cshtml", 
                        section.Properties);
                
                case "ContentSection":
                    return await Html.PartialAsync("~/Views/Shared/Components/ContentSection.cshtml", 
                        section.Properties);
                
                default:
                    return await Html.PartialAsync("~/Views/Shared/Components/DefaultContent.cshtml", 
                        section.Properties);
            }
        }
        catch (Exception ex)
        {
            // Log the error and show a fallback
            System.Diagnostics.Debug.WriteLine($"Error rendering section {section.Component}: {ex.Message}");
            
            return Html.Raw($@"
                <div class='alert alert-warning' role='alert'>
                    <i class='bi bi-exclamation-triangle me-2'></i>
                    <strong>Component Error:</strong> Unable to render {section.Component}
                </div>
            ");
        }
    }
    
    private NihongoSekai.Web.ViewModels.HeroSectionViewModel CreateHeroViewModel(Dictionary<string, object> properties)
    {
        return new NihongoSekai.Web.ViewModels.HeroSectionViewModel
        {
            Title = properties.GetValueOrDefault("title", "Welcome to Nihongo Sekai").ToString() ?? "",
            Subtitle = properties.GetValueOrDefault("subtitle", "Learn Japanese with native speakers").ToString() ?? "",
            ButtonText = properties.GetValueOrDefault("buttonText", "Get Started").ToString() ?? "",
            ButtonLink = properties.GetValueOrDefault("buttonLink", "/courses").ToString() ?? "",
            BackgroundImage = properties.GetValueOrDefault("backgroundImage", "").ToString(),
            ShowStats = bool.Parse(properties.GetValueOrDefault("showStats", "true").ToString() ?? "true"),
            Stats = new List<NihongoSekai.Web.ViewModels.StatItemViewModel>
            {
                new() { Label = "Students", Value = "10,000+", Icon = "bi-people" },
                new() { Label = "Courses", Value = "150+", Icon = "bi-book" },
                new() { Label = "Teachers", Value = "50+", Icon = "bi-person-badge" },
                new() { Label = "Success Rate", Value = "95%", Icon = "bi-trophy" }
            }
        };
    }
}

<style>
    /* Builder.io specific styles */
    .builder-page {
        min-height: 50vh;
    }
    
    /* Preview mode styles */
    .builder-preview {
        position: relative;
    }
    
    .builder-preview::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
        z-index: 9999;
        animation: preview-pulse 2s ease-in-out infinite alternate;
    }
    
    @keyframes preview-pulse {
        0% { opacity: 0.7; }
        100% { opacity: 1; }
    }
    
    /* Lazy loading styles */
    img.lazy {
        opacity: 0;
        transition: opacity 0.3s;
    }
    
    img.lazy.loaded {
        opacity: 1;
    }
    
    /* Animation classes */
    .animate-on-scroll {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease, transform 0.6s ease;
    }
    
    .animate-on-scroll.animate-in {
        opacity: 1;
        transform: translateY(0);
    }
    
    /* Error handling styles */
    .component-error {
        border: 2px dashed #dc3545;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 0.5rem;
        background-color: #f8d7da;
        color: #721c24;
    }
</style>
