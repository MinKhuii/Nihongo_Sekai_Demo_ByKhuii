name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "8.0.x"
  NODE_VERSION: "20.x"

jobs:
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore BuilderNihongoSekai.sln

      - name: Build
        run: dotnet build BuilderNihongoSekai.sln --no-restore --configuration Release --verbosity normal

      - name: Test
        run: dotnet test BuilderNihongoSekai.sln --no-build --configuration Release --verbosity normal

      - name: Check for unused usings
        run: |
          dotnet format BuilderNihongoSekai.sln --verify-no-changes --verbosity diagnostic

      - name: Generate OpenAPI spec
        run: |
          cd backend
          dotnet run --project BuilderNihongoSekai.Api.csproj --configuration Release &
          sleep 10
          curl -f https://localhost:5001/swagger/v1/swagger.json -k -o swagger.json
          kill %1

      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v3
        with:
          name: swagger-spec
          path: backend/swagger.json

  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup .NET (for NSwag)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download OpenAPI spec
        uses: actions/download-artifact@v3
        with:
          name: swagger-spec
          path: backend/

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Generate TypeScript API client
        run: |
          cd frontend
          npm run generate-api

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Lint
        run: |
          cd frontend
          npm run lint

      - name: Build
        run: |
          cd frontend
          npm run build

      - name: Test
        run: |
          cd frontend
          npm run test -- --run

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

  validate-no-duplication:
    name: Validate No Model Duplication
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check for duplicate TypeScript interfaces
        run: |
          if find frontend/src -name "*.ts" -o -name "*.tsx" | xargs grep -l "interface.*Course\|interface.*Account\|interface.*Classroom" | grep -v generated; then
            echo "❌ Found manually written TypeScript interfaces. All models should be generated from C#."
            exit 1
          fi
          echo "✅ No duplicate TypeScript interfaces found."

      - name: Check for manual API calls
        run: |
          if find frontend/src -name "*.ts" -o -name "*.tsx" | xargs grep -l "fetch\|axios" | grep -v generated; then
            echo "❌ Found manual API calls. All API calls should use generated client."
            exit 1
          fi
          echo "✅ No manual API calls found."

      - name: Verify generated files exist
        run: |
          if [ ! -f "frontend/src/api/generated/api-client.ts" ]; then
            echo "❌ Generated API client not found."
            exit 1
          fi
          echo "✅ Generated API client exists."

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Start backend
        run: |
          cd backend
          dotnet run --project BuilderNihongoSekai.Api.csproj &
          echo $! > backend.pid

      - name: Wait for backend
        run: |
          timeout 60 bash -c 'until curl -f https://localhost:5001/api/health -k; do sleep 2; done'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Test API integration
        run: |
          curl -f https://localhost:5001/swagger/v1/swagger.json -k
          curl -f https://localhost:5001/api/courses -k

      - name: Cleanup
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
          fi
